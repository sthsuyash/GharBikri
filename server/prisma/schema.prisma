generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String
  password    String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  status      String       @default("inactive")
  UserProfile UserProfile? // 1:1 relation

  @@unique([email])
}

model UserProfile {
  id             String     @id @default(uuid())
  first_name     String?
  last_name      String?
  image          String     @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png")
  phone          String?
  city           String?
  state          String?
  bookedVisits   Visit[]    @relation("BookedByUsers")
  property_count Int        @default(0)
  properties     Property[] @relation("UserProperties")
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  user_id        String     @unique
  user           User       @relation(fields: [user_id], references: [id]) // 1:1 relation
  Bookmark       Bookmark[] // 1:n relation

  @@unique([id])
}

model Property {
  id                  String      @id @default(uuid())
  name                String
  description         String
  street_num          Int
  street_name         String?
  city                String
  state               String
  type                String
  bed                 Int
  bath                Int
  area_sq_ft          Int
  repair_quality      String
  year                Int
  price               Float
  listingType         String
  availability_status Boolean
  images              String[]
  facilities          String[]
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt
  views               Int         @default(0)
  bookedVisits        Visit[]     @relation("PropertyVisitsBookedByUsers")
  user_id             String
  user_profile        UserProfile @relation("UserProperties", fields: [user_id], references: [id], onDelete: Cascade)
  Bookmark            Bookmark[]

  @@unique([name, user_id])
}

model Visit {
  id           String      @id @default(uuid())
  start_time   DateTime
  end_time     DateTime
  user_id      String
  property_id  String
  property     Property    @relation("PropertyVisitsBookedByUsers", fields: [property_id], references: [id])
  user_profile UserProfile @relation("BookedByUsers", fields: [user_id], references: [id])
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  @@unique([start_time, end_time])
}

model Bookmark {
  id           String      @id @default(uuid())
  user_id      String
  property_id  String
  property     Property    @relation(fields: [property_id], references: [id])
  user_profile UserProfile @relation(fields: [user_id], references: [id])
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  @@unique([user_id, property_id])
}
